on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:

  build-runtimes:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime: ['chainx']
    container:
      image: chevdor/srtool:nightly-2020-07-20
      volumes:
        - ${{ github.workspace }}:/build
      env:
        PACKAGE: ${{ matrix.runtime }}-runtime
        RUSTC_VERSION: nightly-2020-07-20
    steps:
      - uses: actions/checkout@v2
      - name: Cache target dir
        uses: actions/cache@v2
        with:
          path: '${{ github.workspace }}/target'
          key: srtool-target-${{ matrix.runtime }}-${{ github.sha }}
          restore-keys: |
            srtool-target-${{ matrix.runtime }}-
            srtool-target-
      - name: Build ${{ matrix.runtime }} runtime
        id: build-runtime
        shell: bash
        run: |
          cd /build
          pwd
          ls -la
          build --json | tee srtool_output.json
          cat srtool_output.json
          while IFS= read -r line; do
            echo "::set-output name=$line::$(jq -r ".$line" < srtool_output.json)"
          done <<< "$(jq -r 'keys[]' < srtool_output.json)"
      - name: Upload ${{ matrix.runtime }} srtool json
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.runtime }}-srtool-json
          path: srtool_output.json
      - name: Upload ${{ matrix.runtime }} runtime
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.runtime }}-runtime
          path: "${{ steps.build-runtime.outputs.wasm }}"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ${{ github.ref }}
          draft: false
          prerelease: false

  publish:
    name: Publish for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, ubuntu-latest]

    steps:
    - uses: hecrj/setup-rust-action@master
      with:
        rust-version: stable

    - uses: actions/checkout@v1

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly-2020-08-24
        target: wasm32-unknown-unknown
        profile: minimal
        override: true
        components: rustfmt, rust-src, clippy

    - name: Build
      run: cargo build --release

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: target/release/chainx
        asset_name: chainx-${{ steps.get_version.outputs.VERSION }}-${{ matrix.os }}-x86_64-unknown-linux-gnu
        tag: ${{ github.ref }}
